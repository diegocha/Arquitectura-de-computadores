# -*- coding: utf-8 -*-
"""Punto1Taller01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJrx0kWtPe3sQ8KfJHq5UGtua-4kGhlC
"""

#### PUNTO 1 TALLER 01 ARQUITECTURA DE COMPUTADORES ####

def Bin411toDecimal(bitExpo, bitMantisa, numRead):
    
    ### Definicion de funciones
    def Caracter2Entero(c):
        if (c == "0"):
            return 0
        if (c == "1"):
            return 1

    def Dec2Bin(numeroDec,bitExpo):
        binario = ""
        if numeroDec>0:
            while numeroDec>0:
                if numeroDec%2==0:
                    binario = "0" + binario
                else:
                    binario = "1" + binario
            
                numeroDec = int(math.floor(numeroDec/2))
        else:
            if numeroDec==0:
                binario = "0"
            else:
                binario ="No se pudo convertir"
        return binario.zfill(bitExpo)


    ### Creando un vector con digitos en vez de un string 
    digitos = [None]*len(numRead)
    for i in range(0,len(numRead)):
        digitos[i] = Caracter2Entero(numRead[i])
    
    ### Signo
    if digitos[0] == 0:
        signo = +1
    else:
        signo = -1
    digitos.pop(0)

    ### Escogiendo listas que contienen los digitos del exponente y la mantisa
    exponente = [0]*bitExpo
    mantisa = [0]*bitMantisa
    pos = 0
    for k in range(0,len(digitos)):
        if (k==bitExpo):
            pos = 0
        if (k<bitExpo):
            exponente[pos] = digitos[k]
        else:
            mantisa[pos] = digitos[k]
        pos = pos + 1
    
    ### Sesgo
    sesgo = 2**(bitExpo-1)-1

    ### Hallando el valor decimal del exponente
    sumExpo = 0    
    for i in range(bitExpo-1,-1,-1):
        sumExpo = sumExpo + ( exponente[i] * 2**( bitExpo - (i + 1) ) )
    valorExpo = sumExpo - sesgo    

    ### Hallando el valor decimal de la mantisa
    valorMantisa = 0
    for i in range(0,bitMantisa):
        pot2 = 1/(2**(i+1))
        valorMantisa = valorMantisa + (mantisa[i] * pot2)
    
    ### Calculando el valor decimal del numero leido
    Coef = signo*(1 + valorMantisa)
    Decimal = Coef*(2**(valorExpo))

    ### Mostrando resultados
    salida = "El valor del numero en decimal es " + repr(Coef) + " x 2^(" + repr(valorExpo) + ") = " + repr(Decimal)
    return(print(salida))



################# EJECUTANDO LA FUNCION ANTERIOR ################
import math
bitExpo = 4
bitMantisa = 11
numRead = str(input("Ingrese el nÃºmero binario de longitud 16 bits: \n"))
Bin411toDecimal(bitExpo, bitMantisa, numRead)